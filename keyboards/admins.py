import urllib.parse
import json
from keyboards.shared_keyboard import back_button, edit_delete_buttons
from .groups import GroupActionFactory
from .coaches import CoachActionFactory
from models import Admin, Coach, Group, Schedule, Base
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import Type
from models import Base
from models.main import FIELD_LABELS
from sqlalchemy.inspection import inspect

page_size = 10


def admin_main_kb() -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π:
    - callback_data: `admin_block_{name}`
    """

    return InlineKeyboardMarkup(inline_keyboard=[

        [InlineKeyboardButton(text='–¢—Ä–µ–Ω–µ—Ä—ã',
                              callback_data=f'admin_block_coach'),
         InlineKeyboardButton(text='–ì—Ä—É–ø–ø—ã',
                              callback_data=f'admin_block_group')],
        [InlineKeyboardButton(text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
                              callback_data=f'admin_block_schedule'),
         InlineKeyboardButton(text='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã',
                              callback_data=f'admin_block_admin')]])


def main_edit_kb(name: str, prefix: str) -> InlineKeyboardMarkup:
    """
    –ö–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:
    - –î–æ–±–∞–≤–∏—Ç—å `{name}`: `admin_add_{prefix}`
    - –ò–∑–º–µ–Ω–∏—Ç—å/ –£–¥–∞–ª–∏—Ç—å `{name}`: `admin_{prefix}_page:0`
    - –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é: `admin_main`

    """
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f'‚ûï –î–æ–±–∞–≤–∏—Ç—å {name}',
                              callback_data=f'admin_add_{prefix}')],
        [InlineKeyboardButton(text=f'‚öôÔ∏èüóëÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å/ –£–¥–∞–ª–∏—Ç—å {name}',
                              callback_data=f'admin_{prefix}_page:0')],
        [InlineKeyboardButton(text=f'‚Ü© –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                              callback_data=f'admin_main')]])


def confirm_button(data: dict) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞:
    - –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å: `confirm_edit:{model}:{obj_id}:{field}`
    - –û—Ç–º–µ–Ω–∏—Ç—å: `admin_main`
    """
    model = data["model"]
    obj_id = data["obj_id"]
    field = data["field"]

    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
                callback_data=f'confirm_edit:{model}:{obj_id}:{field}'
            )],
            [InlineKeyboardButton(
                text='‚Ü© –û—Ç–º–µ–Ω–∏—Ç—å',
                callback_data='admin_main'
            )]
        ]
    )


def confirm_create_button(model: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
                                  callback_data=f'confirm_create:{model}')],
            [InlineKeyboardButton(text='‚Ü© –û—Ç–º–µ–Ω–∏—Ç—å',
                                  callback_data='admin_main')]])


def delete_button(name: str, id: int, prefix: str = '') -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞:
    - –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ: `confirm_{prefix_}del_{name}:{id}`
    - –û—Ç–º–µ–Ω–∏—Ç—å: `admin_main`
    """
    if prefix:
        prefix = f'{prefix}_'
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text='‚ÄºÔ∏è–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ‚ÄºÔ∏è',
                                               callback_data=f'confirm_{prefix}del_{name}:{id}')],
                         [InlineKeyboardButton(text='‚Ü© –û—Ç–º–µ–Ω–∏—Ç—å',
                                               callback_data='admin_main')]])


def return_to_main_button() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞:
    - –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é `admin_main`
    """
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text='‚Ü© –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é',
                                               callback_data='admin_main')]])


def get_model_class(name: str) -> Type[Base]:
    """
    –í–æ–∑–≤—Ä–∞—Ç –º–æ–¥–µ–ª–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é. –ü—Ä–∏–º–µ—Ä:
    - `'Coach' -> Coach`
    """
    return {
        'coach': Coach,
        'goup': Group,
        'schedule': Schedule,
        'admin': Admin,
    }[name]


def fields_kb(item: Type[Base]) -> InlineKeyboardMarkup:
    mapper = inspect(item.__class__)
    buttons = []
    cls_name = item.__class__.__name__.lower()
    for field_prop in mapper.column_attrs:
        field = field_prop.key
        if field != 'id' and field != 'coach_id':
            field_value = getattr(item, field)
            field_label = FIELD_LABELS[cls_name][field]
            buttons.append([InlineKeyboardButton(text=f'{field_label}: {field_value}',
                                                 callback_data=f'edit_field:{cls_name}:{item.id}:{field}')])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_kb_factory(data: dict):
    if 'offset' in data.keys():
        return GroupActionFactory(coach=data['coach'], page=data['page'], offset=data['offset'], change_id=data['id'])
    if 'groups' in data.keys():
        return CoachActionFactory(groups=data['groups'], page=data['page'], change_id=data['id'])
    else:
        return AdminActionFactory(change_id=data['id'], page=data['page'])


class AdminActionFactory:
    def __new__(cls,
                change_id: int,
                page: int = 0,
                ) -> InlineKeyboardMarkup:
        buttons = []
        prefix = 'admin_'

        buttons.append(edit_delete_buttons(change_id, 'admin'))
        buttons.append(back_button('‚Ü© –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤',
                                   f'{prefix}admin_page:{page}'))

        return InlineKeyboardMarkup(inline_keyboard=buttons)
